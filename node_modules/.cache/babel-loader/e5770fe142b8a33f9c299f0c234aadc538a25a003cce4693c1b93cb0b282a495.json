{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\OneDrive\\\\Desktop\\\\Khushi\\\\6th sem\\\\projectfrontend\\\\sugar-wise\\\\src\\\\Components\\\\Report.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Report = () => {\n  _s();\n  const [recommendations, setRecommendations] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Add a state for loading indicator\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true); // Set loading state to true\n      try {\n        const response = await axios.get('/recommendations', {\n          params: {\n            insulin: 1,\n            metformin: 1,\n            glipizide: 1,\n            // ... other medication parameters\n            glyburide: 1,\n            pioglitazone: 1,\n            rosiglitazone: 1,\n            glimepiride: 1,\n            repaglinide: 1,\n            'glyburide-metformin': 1,\n            nateglinide: 1\n            // You can add optional parameters like patientName, age, etc.\n          }\n        });\n        setRecommendations(response.data.recommendations);\n      } catch (error) {\n        console.error('Error fetching recommendations:', error);\n      } finally {\n        setIsLoading(false); // Set loading state to false after fetching\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"report-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"heading\",\n      children: \"Recommendation Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommendations-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recommended Medications:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Fetching recommendations...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this) // Display loading message\n      : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: recommendations && Array.isArray(recommendations) ? recommendations.map((medication, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: medication\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No recommendations available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Report, \"xOwjJ4lkLaOJHIJcGAKH/eLO9pU=\");\n_c = Report;\nexport default Report;\nvar _c;\n$RefreshReg$(_c, \"Report\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Report","_s","recommendations","setRecommendations","isLoading","setIsLoading","fetchData","response","get","params","insulin","metformin","glipizide","glyburide","pioglitazone","rosiglitazone","glimepiride","repaglinide","nateglinide","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","map","medication","index","_c","$RefreshReg$"],"sources":["C:/Users/sinha/OneDrive/Desktop/Khushi/6th sem/projectfrontend/sugar-wise/src/Components/Report.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Report = () => {\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Add a state for loading indicator\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true); // Set loading state to true\r\n      try {\r\n        const response = await axios.get('/recommendations', {\r\n          params: {\r\n            insulin: 1,\r\n            metformin: 1,\r\n            glipizide: 1,\r\n            // ... other medication parameters\r\n            glyburide: 1,\r\n            pioglitazone: 1,\r\n            rosiglitazone: 1,\r\n            glimepiride: 1,\r\n            repaglinide: 1,\r\n            'glyburide-metformin': 1,\r\n            nateglinide: 1,\r\n            // You can add optional parameters like patientName, age, etc.\r\n          },\r\n        });\r\n        setRecommendations(response.data.recommendations);\r\n      } catch (error) {\r\n        console.error('Error fetching recommendations:', error);\r\n      } finally {\r\n        setIsLoading(false); // Set loading state to false after fetching\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"report-page\">\r\n      <h2 className=\"heading\">Recommendation Report</h2>\r\n      <div className=\"recommendations-box\">\r\n        <h3>Recommended Medications:</h3>\r\n        {isLoading ? (\r\n          <p>Fetching recommendations...</p> // Display loading message\r\n        ) : (\r\n          <ul>\r\n            {recommendations && Array.isArray(recommendations) ? (\r\n              recommendations.map((medication, index) => (\r\n                <li key={index}>{medication}</li>\r\n              ))\r\n            ) : (\r\n              <li>No recommendations available</li>\r\n            )}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Report;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}